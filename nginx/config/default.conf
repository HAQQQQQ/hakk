# ==========================
# üö® RATE LIMIT ZONES (Global Context)
# ==========================
# Base rate limits ‚Äî Defined in the **Global Context** (outside `server {}` block)
limit_req_zone $binary_remote_addr zone=api_limit:10m rate=10r/s;  # 10 requests per second
limit_req_zone $binary_remote_addr zone=login_limit:10m rate=3r/m;  # 3 requests per minute

server {
    listen 8080;

    # ==========================
    # üåç FRONTEND CLIENT ROUTE
    # ==========================
    location / {
        proxy_pass http://host.docker.internal:3000;

        # WebSocket Support (React Dev Server)
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';

        # Forward headers for proper request handling
        proxy_set_header Host $host;
    }

    # ==========================
    # üöÄ API ROUTE (WITH RATE LIMIT)
    # ==========================
    location /api/ {
        proxy_pass http://host.docker.internal:3001;

        # ‚úÖ Automatically Inject `x-nginx-secure-key` for Requests to API
        proxy_set_header x-nginx-secure-key "secure-nginx-key";

        # Apply Rate Limit for API
        limit_req zone=api_limit burst=20 nodelay;
        limit_req_status 429;

        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # ==========================
    # üö™ LOGIN ROUTE (WITH STRICT LIMIT)
    # ==========================
    location /api/login {
        proxy_pass http://host.docker.internal:3001;

        # ‚úÖ Automatically Inject `x-nginx-secure-key` for Requests to Login Route
        proxy_set_header x-nginx-secure-key "secure-nginx-key";

        # Apply Stricter Rate Limit for Login
        limit_req zone=login_limit burst=2;
        limit_req_status 429;
    }

    # ==========================
    # ‚ùå CUSTOM RATE LIMIT ERROR RESPONSE
    # ==========================
    # This line is for limit_conn which you're not using, so it's been removed
    # limit_conn_status 429;

    # Redirect to custom 429 page on rate limit exceeded
    error_page 429 = @rate_limit_error;

    location @rate_limit_error {
        add_header Content-Type text/plain;  # Ensure response is plain text
        return 429 "‚ùó Too Many Requests - Please try again later.";  # Custom message
    }

    # ==========================
    # ‚ù§Ô∏è HEALTH CHECK ROUTE
    # ==========================
    location /health {
        return 200 'OK';
    }
}